@page
@using StratagemsGame.Pages.Game;
@model StratagemsGame.Pages.Game.GamePageModel
@{

}

<div class="scoreBoard">
    <label>@Model.Score</label>
</div>
<div class="progressBar">
  <div class="bar"></div>
</div>
<div class="container">
    <div class="row justify-content-center align-items-center h-25">
        <div class="col">
            <div id="card" class="card">
                <div class="card-header text-center">
                    @Model.CategoryName
                </div>
                <div class="card-body text-center"> 
                    <h5 class="card-title"> @Model.StratName</h5><span><br /><img class="sicon" src="@Model.ImagePath"/></img></span>
                    <table id="table"></table>
                        @for(var i = 0; i < Model.CurrentSequence.Count(); i++)
                        {
                            <td class="arrow">
                                <span id="@Model.CurrentSequence[i]" class="bi bi-@Model.arrowIcons[Model.CurrentSequence[i]]" style="font-size: 40px;"></span>
                            </td> 
                        }
                    </table> 
                   <div hidden>
                        <input type="text" id="cseq" value="@Model.CurrentSequence">
                   </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let currentIndex = 0; 
    let count = 30;
    let score = 0;
    let CurrentSequence = document.querySelectorAll('span.bi');
    window.addEventListener('keyup', function(event){
        handleKeyup(event.key);
    });

    window.addEventListener('htmx:afterOnLoad', function(evt){
        Reset();
    })
    function handleKeyup(key) 
    {
        var seq = Array.from(CurrentSequence);
        var Ids = seq.map(function(span){
            return span.id;
        });
        console.log(Ids);
        if (key === GetKeyName(Ids[currentIndex])) {
            console.log('correct');
            var disabledarrow = document.getElementById(Ids[currentIndex]);
            disabledarrow.className = '';
            disabledarrow.id += ' Complete';
            disabledarrow.className = SetCompleteIcon(Ids[currentIndex]);
            currentIndex++; 
            if (currentIndex === Ids.length) {
                currentIndex = 0;
                remainingTime + 5;
                getNextSequence();
            }
        } else{
            currentIndex = 0; //Reset on incorrect key
            Reset();
            console.log('wrong');
        }
    }

    function Reset(){
        CurrentSequence = document.querySelectorAll('span.bi');
        CurrentSequence.forEach(element => function(){
            alert(element.id);
            var icon = ResetIcons(element.id);
            element.className = '';
            var splitId = element.id.split(' ');
            element.id = splitId[0];
            element.classList.add(icon);
        });
    }

    async function getNextSequence() {
        try {
            const response = await fetch('/game/gamepage?handler=Next');

            if (!response.ok) {
                throw new Error('Network response was not OK');
            }

            const html = await response.text();

            document.getElementById('card').innerHTML = html;
            Reset();
        } catch (error) {
            console.error('Error fetching HTML:', error);
            }
    }

    function SetCompleteIcon(id){
        switch (id){
            case '39':
            return 'bi-arrow-up-square-fill';
            case '40':
            return 'bi-arrow-down-square-fill';
            case '37':
            return 'bi-arrow-left-square-fill';
            case '38':
            return 'bi-arrow-right-square-fill'
            default:
            return 'bi-circle-x-fill';
        }
    }

    function ResetIcons(id){


        switch (id){
            case '39':
            return 'bi-arrow-up';
            case '40':
            return 'bi-arrow-down';
            case '37':
            return 'bi-arrow-left';
            case '38':
            return 'bi-arrow-right'
            default:
            return 'bi-circle';
        }


    }

    function GetKeyName(key) {
    switch (key) {
        case '39':
            return 'ArrowUp';
        case '40':
            return 'ArrowDown';
        case '37':
            return 'ArrowLeft';
        case '38':
            return 'ArrowRight';
        default:
            return 'Unknown';
        }
    }
    function Timer(){
        const timer = setInterval(function() {
            count--;
            if(count === 0){
                gameOver();
            }
        }, 1000);
    }

    function gameOver(){
        
    }

    const progressBarEl = document.querySelector(".bar");

    let remainingTime = 60;
    const totalTime = remainingTime;

    function countdown(){
        if(remainingTime > 0){
            const progress = ((totalTime - remainingTime)/ totalTime) * 100;
            progressBarEl.style.width = `${progress}%`;
            remainingTime--;
            setTimeout(countdown, 1000);
        }else{
            progressBarEl.style.width = "100%";
        }
    }

countdown();
</script>